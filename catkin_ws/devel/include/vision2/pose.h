// Generated by gencpp from file vision2/pose.msg
// DO NOT EDIT!


#ifndef VISION2_MESSAGE_POSE_H
#define VISION2_MESSAGE_POSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace vision2
{
template <class ContainerAllocator>
struct pose_
{
  typedef pose_<ContainerAllocator> Type;

  pose_()
    : pose_x(0)
    , pose_y(0)
    , size_x(0)
    , size_y(0)
    , id()  {
    }
  pose_(const ContainerAllocator& _alloc)
    : pose_x(0)
    , pose_y(0)
    , size_x(0)
    , size_y(0)
    , id(_alloc)  {
  (void)_alloc;
    }



   typedef int64_t _pose_x_type;
  _pose_x_type pose_x;

   typedef int64_t _pose_y_type;
  _pose_y_type pose_y;

   typedef int64_t _size_x_type;
  _size_x_type size_x;

   typedef int64_t _size_y_type;
  _size_y_type size_y;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _id_type;
  _id_type id;





  typedef boost::shared_ptr< ::vision2::pose_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::vision2::pose_<ContainerAllocator> const> ConstPtr;

}; // struct pose_

typedef ::vision2::pose_<std::allocator<void> > pose;

typedef boost::shared_ptr< ::vision2::pose > posePtr;
typedef boost::shared_ptr< ::vision2::pose const> poseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::vision2::pose_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::vision2::pose_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::vision2::pose_<ContainerAllocator1> & lhs, const ::vision2::pose_<ContainerAllocator2> & rhs)
{
  return lhs.pose_x == rhs.pose_x &&
    lhs.pose_y == rhs.pose_y &&
    lhs.size_x == rhs.size_x &&
    lhs.size_y == rhs.size_y &&
    lhs.id == rhs.id;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::vision2::pose_<ContainerAllocator1> & lhs, const ::vision2::pose_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace vision2

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::vision2::pose_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::vision2::pose_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::vision2::pose_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::vision2::pose_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::vision2::pose_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::vision2::pose_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::vision2::pose_<ContainerAllocator> >
{
  static const char* value()
  {
    return "3a518b3a09f8b8f8b8aa5ae8d417c35d";
  }

  static const char* value(const ::vision2::pose_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x3a518b3a09f8b8f8ULL;
  static const uint64_t static_value2 = 0xb8aa5ae8d417c35dULL;
};

template<class ContainerAllocator>
struct DataType< ::vision2::pose_<ContainerAllocator> >
{
  static const char* value()
  {
    return "vision2/pose";
  }

  static const char* value(const ::vision2::pose_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::vision2::pose_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int64 pose_x\n"
"int64 pose_y\n"
"int64 size_x\n"
"int64 size_y\n"
"string id\n"
;
  }

  static const char* value(const ::vision2::pose_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::vision2::pose_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.pose_x);
      stream.next(m.pose_y);
      stream.next(m.size_x);
      stream.next(m.size_y);
      stream.next(m.id);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct pose_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::vision2::pose_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::vision2::pose_<ContainerAllocator>& v)
  {
    s << indent << "pose_x: ";
    Printer<int64_t>::stream(s, indent + "  ", v.pose_x);
    s << indent << "pose_y: ";
    Printer<int64_t>::stream(s, indent + "  ", v.pose_y);
    s << indent << "size_x: ";
    Printer<int64_t>::stream(s, indent + "  ", v.size_x);
    s << indent << "size_y: ";
    Printer<int64_t>::stream(s, indent + "  ", v.size_y);
    s << indent << "id: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.id);
  }
};

} // namespace message_operations
} // namespace ros

#endif // VISION2_MESSAGE_POSE_H
